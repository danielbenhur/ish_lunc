*** Begin Patch
*** Update File: scripts/interactive_map.py
@@
 # Cores e classes solicitadas
 COLORS_ISH = ['#FF5500', '#FFAA00', '#FFFF71', '#169200', '#2986cc']
+# cor para "sem-dados" (NULL / 0)
+NO_DATA_COLOR = "#cccccc"
 CLASS_THRESHOLDS = [1.5, 2.5, 3.5, 4.5, 5.0]  # limites superiores
 CLASS_LABELS = [
     "1.00 - 1.50 (Mínimo)",
     "1.51 - 2.50 (Baixo)",
     "2.51 - 3.50 (Médio)",
     "3.51 - 4.50 (Alto)",
     "4.51 - 5.00 (Máximo)",
 ]
@@
 def get_color_for_value(v):
-    """Return color for ISH value; NaN/None => light grey."""
-    try:
-        if v is None:
-            return "#cccccc"
-        v = float(v)
-    except Exception:
-        return "#cccccc"
-    if v < 1.0:
-        return "#eeeeee"
-    for thresh, color in zip(CLASS_THRESHOLDS, COLORS_ISH):
-        if v <= thresh:
-            return color
-    return COLORS_ISH[-1]
+    """Return color for ISH value.
+    Observações:
+      - valores None/NULL e o número 0.0 são tratados como 'sem dados' e recebem NO_DATA_COLOR.
+      - valores < 1.0 (mas > 0) recebem uma cor cinza clara.
+    """
+    try:
+        if v is None:
+            return NO_DATA_COLOR
+        vf = float(v)
+    except Exception:
+        return NO_DATA_COLOR
+    # tratar zero como sem-dados
+    if vf == 0.0:
+        return NO_DATA_COLOR
+    if vf < 1.0:
+        return "#eeeeee"
+    for thresh, color in zip(CLASS_THRESHOLDS, COLORS_ISH):
+        if vf <= thresh:
+            return color
+    return COLORS_ISH[-1]
*** End Patch
*** Begin Patch
*** Update File: scripts/interactive_map.py
@@
-def run_interactive(gpkg_path=None, chosen_layers=None, fields_map=None, output_html=None, open_browser=True):
+def run_interactive(gpkg_path=None, chosen_layers=None, fields_map=None, output_html=None, open_browser=True,
+                    generate='both', static=False, static_out=None):
@@
     # 6) load selected layers into memory
-    gdfs = []
-    for lyr in chosen_layers:
-        gdf = gpd.read_file(gpkg_path, layer=lyr)
-        gdfs.append((lyr, gdf))
+    # Decidir quais saídas serão necessárias para economizar tempo/memória
+    need_html = generate in ('html', 'both')
+    need_png = (generate in ('png', 'both')) and static
+    if not (need_html or need_png):
+        print(f"Nenhuma saída requisitada (generate={generate}, static={static}). Abortando.")
+        return None
+
+    # Carregar GDFs apenas se necessário
+    gdfs = []
+    if need_html or need_png:
+        for lyr in chosen_layers:
+            gdf = gpd.read_file(gpkg_path, layer=lyr)
+            gdfs.append((lyr, gdf))
@@
-    # 8) build folium map
-    m = folium.Map(location=[center_y, center_x], zoom_start=8, tiles="CartoDB Positron")
+    # 8) build folium map (apenas se HTML foi pedido)
+    if need_html:
+        m = folium.Map(location=[center_y, center_x], zoom_start=8, tiles="CartoDB Positron")
@@
-    # 10) write output HTML
-    if output_html is None:
-        gpkg_parent = os.path.dirname(os.path.abspath(gpkg_path))
-        output_dir = os.path.join(gpkg_parent, "interactive_maps")
-        os.makedirs(output_dir, exist_ok=True)
-        output_html = os.path.join(output_dir, f"interactive_map_{Path(gpkg_path).stem}.html")
-
-    m.save(output_html)
-    print("Mapa salvo em:", output_html)
-    if open_browser:
-        try:
-            webbrowser.open("file://" + os.path.abspath(output_html))
-        except Exception:
-            pass
-            
-    img_path = os.path.join(output_dir, f"preview_{Path(gpkg_path).stem}.png")
-    save_static_maps_from_selection(gpkg_path, gdfs, layer_field_selection, output_path=img_path,
-                                    title_prefix=f"Preview - {Path(gpkg_path).stem}")
-    return output_html
+        # 10) write output HTML
+        if output_html is None:
+            gpkg_parent = os.path.dirname(os.path.abspath(gpkg_path))
+            output_dir = os.path.join(gpkg_parent, "interactive_maps")
+            os.makedirs(output_dir, exist_ok=True)
+            output_html = os.path.join(output_dir, f"interactive_map_{Path(gpkg_path).stem}.html")
+        else:
+            output_dir = os.path.dirname(os.path.abspath(output_html)) or "."
+
+        m.save(output_html)
+        print("Mapa salvo em:", output_html)
+        if open_browser:
+            try:
+                webbrowser.open("file://" + os.path.abspath(output_html))
+            except Exception:
+                pass
+    else:
+        # garantir output_dir para o caso de só gerar PNG (default path)
+        gpkg_parent = os.path.dirname(os.path.abspath(gpkg_path))
+        output_dir = os.path.join(gpkg_parent, "interactive_maps")
+        os.makedirs(output_dir, exist_ok=True)
+
+    # Se PNG estático foi requisitado, gerar aqui (apenas se static True)
+    if need_png:
+        if static_out is None:
+            img_path = os.path.join(output_dir, f"preview_{Path(gpkg_path).stem}.png")
+        else:
+            img_path = static_out
+        save_static_maps_from_selection(gpkg_path, gdfs, layer_field_selection, output_path=img_path,
+                                        title_prefix=f"Preview - {Path(gpkg_path).stem}")
+        # se HTML não foi gerado, retornar o caminho do PNG; caso contrário, retornar HTML
+        return output_html if need_html else img_path
+    return output_html
*** End Patch
*** Begin Patch
*** Update File: scripts/interactive_map.py
@@
     parser.add_argument("--output", help="Arquivo HTML de saída (opcional).")
     parser.add_argument("--no-open", action="store_true", help="Não abrir o HTML no navegador após criar.")
+    parser.add_argument("--generate", choices=["html", "png", "both"], default="both",
+                        help="O que gerar: 'html' (apenas HTML), 'png' (apenas PNG estático), 'both' (padrão).")
+    parser.add_argument("--static", action="store_true", help="Gerar imagem estática (subplots) com as camadas/fields selecionados.")
+    parser.add_argument("--static-out", help="Caminho do PNG de saída para a imagem estática (opcional).")
     args = parser.parse_args()
 
     gpkg = args.gpkg
@@
-    out = run_interactive(gpkg_path=gpkg, chosen_layers=layers, fields_map=fields_map, output_html=args.output, open_browser=(not args.no_open))
+    out = run_interactive(gpkg_path=gpkg, chosen_layers=layers, fields_map=fields_map,
+                          output_html=args.output, open_browser=(not args.no_open),
+                          generate=args.generate, static=args.static, static_out=args.static_out)
*** End Patch
